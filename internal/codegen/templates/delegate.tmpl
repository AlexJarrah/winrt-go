/*
#include <stdint.h>

// Note: these functions have a different signature but because they are only
// used as function pointers (and never called) and because they use C name
// mangling, the signature doesn't really matter.
void winrt_{{.Name}}_Invoke(void);
void winrt_{{.Name}}_QueryInterface(void);
uint64_t winrt_{{.Name}}_AddRef(void);
uint64_t winrt_{{.Name}}_Release(void);

// The Vtable structure for WinRT {{.Name}} interfaces.
typedef struct {
	void *QueryInterface;
	void *AddRef;
	void *Release;
	void *Invoke;
} {{.Name}}Vtbl_t;

// The Vtable itself. It can be kept constant.
static const {{.Name}}Vtbl_t winrt_{{.Name}}Vtbl = {
	(void*)winrt_{{.Name}}_QueryInterface,
	(void*)winrt_{{.Name}}_AddRef,
	(void*)winrt_{{.Name}}_Release,
	(void*)winrt_{{.Name}}_Invoke,
};

// A small helper function to get the Vtable.
const {{.Name}}Vtbl_t * winrt_get{{.Name}}Vtbl(void) {
	return &winrt_{{.Name}}Vtbl;
}
*/
import "C"

const GUID{{.Name}} string = "{{.GUID}}"
const Signature{{.Name}} string = "{{.Signature}}"

type {{.Name}} struct {
	ole.IUnknown
	IID      *ole.GUID
	RefCount *winrt.RefCount
	Callback {{.Name}}Callback
}

type {{.Name}}Callback func(instance *{{.Name}},{{- range .InParams -}}
	{{.GoVarName}} {{template "variabletype.tmpl" . }},
{{- end -}})

func New{{.Name}}(iid *ole.GUID, callback {{.Name}}Callback) *{{.Name}} {
    inst := (*{{.Name}})(C.malloc(C.size_t(unsafe.Sizeof({{.Name}}{}))))
    inst.RawVTable = (*interface{})((unsafe.Pointer)(C.winrt_get{{.Name}}Vtbl()))
    inst.IID = iid
    inst.RefCount = winrt.NewRefCount()
    inst.Callback = callback

	inst.RefCount.AddRef()
    return inst
}
