// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint
package streams

import (
	"github.com/go-ole/go-ole"
	"syscall"
	"unsafe"
)

const GUIDIBuffer string = "905a0fe0-bc53-11df-8c49-001e4fc686da"

type IBuffer struct {
	ole.IInspectable
}

type IBufferVtbl struct {
	ole.IInspectableVtbl

	GetCapacity uintptr
	GetLength   uintptr
	SetLength   uintptr
}

func (v *IBuffer) VTable() *IBufferVtbl {
	return (*IBufferVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IBuffer) GetCapacity() (uint32, error) {

	var out uint32

	hr, _, _ := syscall.SyscallN(
		v.VTable().GetCapacity,
		// this
		uintptr(unsafe.Pointer(v)),
		// out params
		uintptr(unsafe.Pointer(&out)), // out uint32
	)

	if hr != 0 {
		return 0, ole.NewError(hr)
	}

	return out, nil
}

func (v *IBuffer) GetLength() (uint32, error) {

	var out uint32

	hr, _, _ := syscall.SyscallN(
		v.VTable().GetLength,
		// this
		uintptr(unsafe.Pointer(v)),
		// out params
		uintptr(unsafe.Pointer(&out)), // out uint32
	)

	if hr != 0 {
		return 0, ole.NewError(hr)
	}

	return out, nil
}

func (v *IBuffer) SetLength(value uint32) error {

	hr, _, _ := syscall.SyscallN(
		v.VTable().SetLength,
		// this
		uintptr(unsafe.Pointer(v)),
		// in params
		uintptr(value), // in value
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}
