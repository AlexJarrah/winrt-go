// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package foundation

import (
	"sync"
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/internal/kernel32"
)

const GUIDTypedEventHandler string = "9de1c534-6ae1-11e0-84e1-18a905bcc53f"
const SignatureTypedEventHandler string = "delegate({9de1c534-6ae1-11e0-84e1-18a905bcc53f})"

type TypedEventHandler struct {
	ole.IUnknown
	sync.Mutex
	refs uint64
	IID  ole.GUID
}

type TypedEventHandlerVtbl struct {
	ole.IUnknownVtbl
	Invoke uintptr
}

type TypedEventHandlerCallback func(instance *TypedEventHandler, sender unsafe.Pointer, args unsafe.Pointer)

var callbacksTypedEventHandler = &typedEventHandlerCallbacksMap{
	mu:        &sync.Mutex{},
	callbacks: make(map[unsafe.Pointer]TypedEventHandlerCallback),
}

func NewTypedEventHandler(iid *ole.GUID, callback TypedEventHandlerCallback) *TypedEventHandler {
	size := unsafe.Sizeof(*(*TypedEventHandler)(nil))
	instPtr := kernel32.Malloc(size)
	inst := (*TypedEventHandler)(instPtr)
	// Initialize all properties: the malloc may contain garbage
	inst.RawVTable = (*interface{})(unsafe.Pointer(&TypedEventHandlerVtbl{
		IUnknownVtbl: ole.IUnknownVtbl{
			QueryInterface: syscall.NewCallback(inst.QueryInterface),
			AddRef:         syscall.NewCallback(inst.AddRef),
			Release:        syscall.NewCallback(inst.Release),
		},
		Invoke: syscall.NewCallback(inst.Invoke),
	}))
	inst.IID = *iid // copy contents
	inst.Mutex = sync.Mutex{}
	inst.refs = 0

	callbacksTypedEventHandler.add(unsafe.Pointer(inst), callback)

	inst.addRef()
	return inst
}

// addRef increments the reference counter by one
func (r *TypedEventHandler) addRef() uint64 {
	r.Lock()
	defer r.Unlock()
	r.refs++
	return r.refs
}

// removeRef decrements the reference counter by one. If it was already zero, it will just return zero.
func (r *TypedEventHandler) removeRef() uint64 {
	r.Lock()
	defer r.Unlock()

	if r.refs > 0 {
		r.refs--
	}

	return r.refs
}

func (instance *TypedEventHandler) QueryInterface(_, iidPtr unsafe.Pointer, ppvObject *unsafe.Pointer) uintptr {
	// Checkout these sources for more information about the QueryInterface method.
	//   - https://docs.microsoft.com/en-us/cpp/atl/queryinterface
	//   - https://docs.microsoft.com/en-us/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)

	if ppvObject == nil {
		// If ppvObject (the address) is nullptr, then this method returns E_POINTER.
		return ole.E_POINTER
	}

	// This function must adhere to the QueryInterface defined here:
	// https://docs.microsoft.com/en-us/windows/win32/api/unknwn/nn-unknwn-iunknown
	iid := (*ole.GUID)(iidPtr)
	if ole.IsEqualGUID(iid, &instance.IID) || ole.IsEqualGUID(iid, ole.IID_IUnknown) || ole.IsEqualGUID(iid, ole.IID_IInspectable) {
		*ppvObject = unsafe.Pointer(instance)
	} else {
		*ppvObject = nil
		// Return E_NOINTERFACE if the interface is not supported
		return ole.E_NOINTERFACE
	}

	// If the COM object implements the interface, then it returns
	// a pointer to that interface after calling IUnknown::AddRef on it.
	(*ole.IUnknown)(*ppvObject).AddRef()

	// Return S_OK if the interface is supported
	return ole.S_OK
}

func (instance *TypedEventHandler) Invoke(instancePtr unsafe.Pointer, senderPtr unsafe.Pointer, argsPtr unsafe.Pointer) uintptr {
	// See the quote above.
	sender := (unsafe.Pointer)(senderPtr)
	args := (unsafe.Pointer)(argsPtr)
	if callback, ok := callbacksTypedEventHandler.get(instancePtr); ok {
		callback(instance, sender, args)
	}
	return ole.S_OK
}

func (instance *TypedEventHandler) AddRef() uint64 {
	return instance.addRef()
}

func (instance *TypedEventHandler) Release() uint64 {
	rem := instance.removeRef()
	if rem == 0 {
		// We're done.
		instancePtr := unsafe.Pointer(instance)
		callbacksTypedEventHandler.delete(instancePtr)
		kernel32.Free(instancePtr)
	}
	return rem
}

type typedEventHandlerCallbacksMap struct {
	mu        *sync.Mutex
	callbacks map[unsafe.Pointer]TypedEventHandlerCallback
}

func (m *typedEventHandlerCallbacksMap) add(p unsafe.Pointer, v TypedEventHandlerCallback) {
	m.mu.Lock()
	defer m.mu.Unlock()

	m.callbacks[p] = v
}

func (m *typedEventHandlerCallbacksMap) get(p unsafe.Pointer) (TypedEventHandlerCallback, bool) {
	m.mu.Lock()
	defer m.mu.Unlock()

	v, ok := m.callbacks[p]
	return v, ok
}

func (m *typedEventHandlerCallbacksMap) delete(p unsafe.Pointer) {
	m.mu.Lock()
	defer m.mu.Unlock()

	delete(m.callbacks, p)
}
